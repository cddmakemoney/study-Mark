语义化标签：
<header>定义了文档的头部区域
<article>	定义页面独立的内容区域。
<nav>	定义导航链接的部分。
<section>定义文档中的节（section、区段）。
<hgroup>多个标题的集合就用这个包含起来

SVG 是一种使用 XML 描述 2D 图形的语言。

Canvas 通过 JavaScript 来绘制 2D 图形。

客户端存储数据的两个对象为：
localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。
sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。
不管是 localStorage，还是 sessionStorage，可使用的API都相同，常用的有如下几个（以localStorage为例）：

保存数据：localStorage.setItem(key,value);
读取数据：localStorage.getItem(key);
删除单个数据：localStorage.removeItem(key);
删除所有数据：localStorage.clear();
得到某个索引的key：localStorage.key(index);
if(typeof(Storage)!=="undefined")
{
  localStorage.sitename="菜鸟教程";
  document.getElementById("result").innerHTML="网站名：" + localStorage.sitename;
}
else
{
  document.getElementById("result").innerHTML="对不起，您的浏览器不支持 web 存储。";
}

✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳✳
						分割线
	
CSS3：
box-shadow: 10px 10px 5px #888888;附加阴影
如果你在 border-radius 属性中只指定一个值，那么将生成 4 个 圆角。
但是，如果你要在四个角上一一指定，可以使用以下规则：
四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。
例如： border-radius: 15px 50px 30px 5px:

线性渐变 - 从上到下（默认情况下）：
  background-image: linear-gradient(#e66465, #9198e5);
线性渐变 - 从左到右：
background-image: linear-gradient(to right, red , yellow);
线性渐变 - 对角：
background-image: linear-gradient(to bottom right, red, yellow);

自定义字体：
<style> 
@font-face
{
    font-family（必需，规定字体的名称）: myFirstFont;
    src: url(sansation_light.woff);
}
 
div
{
    font-family:myFirstFont;
}
</style>
 

2D转换：	transform: XXX
translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。
translate（50px，100px）是从左边元素移动50个像素，并从顶部移动100像素。
rotate值（30deg）元素顺时针旋转30度。
scale（2,3）转变宽度为原来的大小的2倍，和其原始大小3倍的高度。
3D转换： transform: XXX
rotateX()方法，围绕其在一个给定度数X轴旋转的元素。
rotateY()方法，围绕其在一个给定度数Y轴旋转的元素。

CSS3 过渡是元素从一种样式逐渐改变为另一种的效果，一个典型CSS属性的变化是用户鼠标放在一个元素上时：
transition:width 2s;
div:hover
{
	width:300px;
}

transition-property: width;	变动宽度属性
    transition-duration: 1s;	过程是一秒
    transition-timing-function: linear;	匀速的意思
    transition-delay: 2s;	延迟发生的意思
简写：
 transition: width 1s linear 2s;



****************************************************************************************************************
****************************************************************************************************************
****************************************************************************************************************
弹性盒子：
弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。
弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。
弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。

flex-direction 属性指定了弹性子元素在父容器中的位置。
flex-direction的值有:
row：横向从左到右排列（左对齐），默认的排列方式。
row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。
column：纵向排列。
column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。

横轴对齐：justify-content: flex-start | flex-end | center | space-between | space-around

竖轴对齐：align-items: flex-start | flex-end | center | baseline | stretch
	align-self: auto | flex-start | flex-end | center | baseline | stretch

注意这里有个区别：
align-items：设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。（写在父元素上）
align-self：属性用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。（写在子元素上）

换行方式：flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;
nowrap - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。
wrap - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
wrap-reverse -反转 wrap 排列。

设置各行对齐方式：align-content: flex-start | flex-end | center | space-between | space-around | stretch
stretch - 默认。各行将会伸展以占用剩余的空间。
flex-start - 各行向弹性盒容器的起始位置堆叠。
flex-end - 各行向弹性盒容器的结束位置堆叠。
center -各行向弹性盒容器的中间位置堆叠。
space-between -各行在弹性盒容器中平均分布。
space-around - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。


弹性子元素属性：
<integer>：用整数值来定义排列顺序，数值小的排在前面。可以为负值。默认值为0
order 属性设置弹性容器内弹性子元素的属性:
.first {
    -webkit-order: -1;
    order: -1;
}	//这样我就可以让某个使用了first类的元素排在最前面了，因为其他没设置的都默认为0







****************************************************************************************************************
****************************************************************************************************************
****************************************************************************************************************






