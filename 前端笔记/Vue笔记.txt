


computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：
 var vm = new Vue({
  data: { a: 1 },

  computed: {
    // 仅读取
    aDouble: function () {
      return this.a * 2
    },

    // 读取和设置
    aPlus: {
      get: function () {		//get和set的名字是固定的，不是随便定义的
        return this.a + 1
      },
      set: function (v) {
        this.a = v - 1
      }
    }
  }
})
vm.aPlus   // => 2
vm.aPlus = 3
vm.a       // => 2
vm.aDouble // => 4


Vue.js 监听属性 watch，我们可以通过 watch 来响应数据的变化。
不应该使用箭头函数来定义 watcher 函数
理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例
 基本格式：watch: {
	//如果a改变了，那么就会执行这个函数
 	   a: function (Val, oldVal) {
     	。。。
   	 },
vm.$watch('要监视的属性', function (newVal, oldVal) {		//实例方法也能监视
	
  // 做点什么


watch:{					//监视keyWord:这个属性
					keyWord:{
						immediate:true,  //深度监视
						handler(val){   //这个函数名字是固定的，表示监视的属性更改之后要做的步骤
							this.filPerons = this.persons.filter((p)=>{
								return p.name.indexOf(val) !== -1
							})
						}
					}
				}


})
		【监视能完成异步操作，计算属性不能；计算属性能完成的，监视都能完成，反之不一定 】

收集表单数据：
		若：<input type="text"/>，则v-model收集的是value值，用户输入的就是value值。
		若：<input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。
		若：<input type="checkbox"/>
			1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）
			2.配置input的value属性:
					(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）
					(2)v-model的初始值是数组，那么收集的的就是value组成的数组



指令：


v-pre：跳过这个元素和它的子元素的编译过程。跳过大量没有指令的节点会加快编译。
<span v-pre>{{ this will not be compiled }}</span>

v-once：只渲染元素和组件一次。只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。
这可以用于优化更新性能。
<span v-once>This will never change: {{msg}}</span>


自定义指令：
指令钩子函数：
bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。

钩子函数参数：
el：指令所绑定的元素，可以用来直接操作 DOM。
binding：一个对象，包含以下 property：
	name：指令名，不包括 v- 前缀。
	value：指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。
	oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
	arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。

		注意：不是一定要使用它给的钩子函数，可以直接 function（）{ }

【创建全局指令】：
需要传入指令名称以及一个包含指令钩子函数的对象，该对象的键即钩子函数的函数名，值即函数体，钩子函数可以有多个：
Vue.directive('self_defined_name',{
  bind:function(el,binding){
  //do someting
  },
  inserted: function(el,binding){
  //do something
  },
}


【创建局部指令】：
直接向创建的 Vue 实例的 directives 字典属性添加键值对，键值对即需要添加的自定义指令及对应钩子函数字典对象。
键值对可以有多个，对应多个自定义指令：
new Vue({
  el:'#app',
  directives:{
    self_defined_name1:{
        bind:function(el,binding){
          //do something
        }
        inserted:function(el,binding){
                  //do something
        },
     }

    self_defined_name2:{
        bind:function(el,binding){
          //do something
        }
        inserted:function(el,binding){
                  //do something
        },
     }
  }

})  





vm.$options：
用于当前 Vue 实例的初始化选项。需要在选项中包含自定义 property 时会有用处：
new Vue({
            mixins: [mixin],
            cdd:'ddd',
            data:{
                cdd:'ddg'
            },
            created: function () {
                document.write('组件调用' + this.$options.cdd)	//输出ddd； this.cdd则输出ddg
            }
        });








